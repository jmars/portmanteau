// Generated by IcedCoffeeScript 1.3.3e
var Contextify, EventEmitter2, Map, Portmanteau, Set, WeakMap, WebSocket, almondjs_source, domain, domino, express, fs, iced, path, requirejs_source, shoe, sockjs, url, _, __iced_k, __iced_k_noop, _ref,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

iced = {
  Deferrals: (function() {

    function _Class(_arg) {
      this.continuation = _arg;
      this.count = 1;
      this.ret = null;
    }

    _Class.prototype._fulfill = function() {
      if (!--this.count) return this.continuation(this.ret);
    };

    _Class.prototype.defer = function(defer_params) {
      var _this = this;
      ++this.count;
      return function() {
        var inner_params, _ref;
        inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (defer_params != null) {
          if ((_ref = defer_params.assign_fn) != null) {
            _ref.apply(null, inner_params);
          }
        }
        return _this._fulfill();
      };
    };

    return _Class;

  })(),
  findDeferral: function() {
    return null;
  }
};
__iced_k = __iced_k_noop = function() {};

Contextify = require('contextify');

express = require('express');

domino = require('domino');

path = require('path');

fs = require('fs');

_ = require('underscore');

url = require('url');

sockjs = require('sockjs');

_ref = require('es6-collections'), Map = _ref.Map, WeakMap = _ref.WeakMap, Set = _ref.Set;

EventEmitter2 = require('eventemitter2').EventEmitter2;

shoe = require('shoe');

WebSocket = require('ws');

domain = require('domain');

requirejs_source = fs.readFileSync("" + __dirname + "/client/require.js", 'utf8');

almondjs_source = fs.readFileSync("" + __dirname + "/client/almond.js", 'utf8');

if (process.env.NODE_ENV === 'production') {
  requirejs_source = minify(requirejs_source);
  almondjs_source = minify(almondjs_source);
}

Portmanteau = (function() {

  function Portmanteau() {
    this.loadScript = __bind(this.loadScript, this);
    this.server = express();
    this.Contexts = new WeakMap;
    this.cache = {};
    this.packages = [];
  }

  Portmanteau.prototype.loadScript = function(req) {
    var _this = this;
    return function(context, moduleName, url) {
      var environment, err, exists, location, source, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (url[0] === '/') url = url.slice(1);
      location = path.resolve(_this.dir, url);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced"
        });
        fs.exists(location, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return exists = arguments[0];
            };
          })(),
          lineno: 34
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!exists) throw new Error("" + location + " does not exist");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/index.iced"
          });
          fs.readFile(location, 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return source = arguments[1];
              };
            })(),
            lineno: 36
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (url.indexOf('components') !== -1) {
            source = "define(function(require, exports, module){var define = undefined; " + source + " ; return exports})";
          }
          environment = _this.Contexts.get(req);
          environment.run(source);
          return context.completeLoad(moduleName);
        });
      });
    };
  };

  Portmanteau.prototype.createContext = function(req, res, next) {
    var context, self;
    context = Contextify(domino.createWindow('<!DOCTYPE html>'));
    context.Element = require('domino/lib/element');
    context.SERVER = {
      res: res,
      req: req,
      next: next
    };
    context.navigator = {
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57 Safari/534.24',
      appName: 'node',
      platform: 'node'
    };
    context.history = {
      pushState: function() {},
      replaceState: function() {}
    };
    context.console = console;
    context.addEventListener = function(event, cb) {
      if (event === 'DOMContentLoaded') {
        return cb();
      } else {

      }
    };
    context.setTimeout = function(func, delay) {
      var timer;
      if (delay === 0) {
        timer = process.nextTick;
      } else {
        timer = setTimeout;
      }
      return timer(function() {
        return func();
      }, delay);
    };
    context.clearTimeout = clearTimeout;
    context.window = context;
    self = this;
    context.WebSocket = function(uri) {
      return new WebSocket('ws://localhost:3000/socket/websocket');
    };
    if (req != null) {
      context.location = url.parse('http://' + req.headers.host + req.url + '#');
      context.location.search = '';
      context.document.location = context.location;
    }
    context.run(requirejs_source);
    context.require.load = this.loadScript(req);
    this.Contexts.set(req, context);
    return context;
  };

  Portmanteau.prototype.setupPackages = function(json) {
    var name, version, _ref1, _results,
      _this = this;
    _ref1 = json.dependencies;
    _results = [];
    for (name in _ref1) {
      version = _ref1[name];
      _results.push((function() {
        var child, key, location, obj, subdir, val, _ref2;
        location = name.replace('/', '-');
        name = name.split('/')[1];
        child = require(path.join(_this.dir, 'components', location, 'component.json'));
        subdir = path.dirname(child.scripts[0]);
        obj = {
          name: name,
          location: path.join('components', location, subdir),
          main: path.basename(child.scripts[0]),
          dependencies: []
        };
        _this.packages.push(obj);
        _ref2 = child.dependencies;
        for (key in _ref2) {
          val = _ref2[key];
          obj.dependencies.push(key.split('/')[1]);
        }
        return _this.setupPackages(child);
      })());
    }
    return _results;
  };

  Portmanteau.prototype.load = function(dir) {
    var _this = this;
    this.dir = dir;
    this.scripts = express["static"](this.dir);
    this.setupPackages(require(path.join(this.dir, 'component.json')));
    this.server.get('/require.js', function(req, res, next) {
      return res.send(requirejs_source + ("require.config({packages:" + (JSON.stringify(_this.packages)) + ", baseUrl:'/requirejs'})"));
    });
    this.server.get('/requirejs/*', function(req, res, next) {
      var data, deps, err, exists, extension, name, pack, script, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      script = req.params[0];
      extension = path.extname(script);
      name = script.replace(extension, '');
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced"
        });
        fs.exists(path.join(_this.dir, script), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return exists = arguments[0];
            };
          })(),
          lineno: 105
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!exists) console.error("" + script + " doesnt exist");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/index.iced"
          });
          fs.readFile(path.join(_this.dir, script), 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return data = arguments[1];
              };
            })(),
            lineno: 108
          }));
          __iced_deferrals._fulfill();
        })(function() {
          var _i, _len, _ref1;
          _ref1 = _this.packages;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            pack = _ref1[_i];
            if (pack.location === path.dirname(script)) {
              deps = ['require', 'exports', 'module'].concat(pack.dependencies);
              res.send("define(" + (JSON.stringify(deps)) + ", function(require, exports, module){var define = undefined; " + data + " ; return exports})");
              return;
            }
          }
          if (data.indexOf('define(') === -1) {
            data = "define(require, exports, module, function(){ " + data + " })";
          }
          return res.send(data);
        });
      });
    });
    this.server.get('/components/*', function(req, res, next) {
      var data, deps, err, script, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      script = req.params[0];
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.iced"
        });
        fs.readFile(path.join(_this.dir, 'components', script), 'utf8', __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return data = arguments[1];
            };
          })(),
          lineno: 119
        }));
        __iced_deferrals._fulfill();
      })(function() {
        deps = ['require', 'exports', 'module'];
        res.send("define(" + (JSON.stringify(deps)) + ", function(require, exports, module){var define = undefined; " + data + " ; return exports})");
      });
    });
    return this.server.use(function(req, res, next) {
      var d;
      d = domain.create();
      d.on('error', function(e) {
        return console.error("Error on request: " + e);
      });
      return d.run(function() {
        var context, mods;
        context = _this.createContext(req, res, next);
        mods = context.require.s.newContext();
        mods.configure({
          packages: _this.packages
        });
        mods.require(['main'], function() {});
        return res.once('end', function() {
          return _this.Contexts.del(req);
        });
      });
    });
  };

  Portmanteau.prototype.listen = function() {
    var handle, sock;
    handle = this.server.listen.apply(this.server, arguments);
    sock = shoe(this.Stream || function() {});
    return sock.install(handle, '/socket');
  };

  return Portmanteau;

})();

module.exports = Portmanteau;
