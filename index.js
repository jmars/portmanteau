// Generated by IcedCoffeeScript 1.3.3e
var Contextify, Future, Map, Portmanteau, Remote, Set, WeakMap, almondjs_source, domino, express, fs, path, request, requirejs_source, sockjs, url, wait, wrap, _, _ref, _ref1,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Contextify = require('contextify');

_ref = Future = require('fibers/future'), wrap = _ref.wrap, wait = _ref.wait;

express = require('express');

domino = require('domino');

path = require('path');

fs = require('fs');

_ = require('underscore');

url = require('url');

Remote = require('remote');

request = require('request');

sockjs = require('sockjs');

_ref1 = require('es6-collections'), Map = _ref1.Map, WeakMap = _ref1.WeakMap, Set = _ref1.Set;

requirejs_source = fs.readFileSync("" + __dirname + "/client/require.js", 'utf8');

almondjs_source = fs.readFileSync("" + __dirname + "/client/almond.js", 'utf8');

if (process.env.NODE_ENV === 'production') {
  requirejs_source = minify(requirejs_source);
  almondjs_source = minify(almondjs_source);
}

Portmanteau = (function() {

  function Portmanteau() {
    this.loadScript = __bind(this.loadScript, this);
    this.server = express();
    this.Contexts = new WeakMap;
    this.cache = {};
    this.components = {};
    this.packages = [];
  }

  Portmanteau.prototype.loadScript = function(context, moduleName, url) {
    var environment, future, location, source,
      _this = this;
    if (url[0] === '/') url = url.slice(1);
    location = path.resolve(this.dir, url);
    future = new Future;
    fs.readFile(location, 'utf8', function(err, data) {
      if (err) {
        return future["throw"](err);
      } else {
        if (url.indexOf('components') !== -1) {
          return future["return"]("define(function(require, exports, module){var define = undefined; " + data + " ; return exports})");
        } else {
          return future["return"](data);
        }
      }
    });
    source = future.wait();
    environment = this.Contexts.get(Fiber.current);
    environment.run(source);
    return context.completeLoad(moduleName);
  };

  Portmanteau.prototype.createContext = function(req, res, next) {
    var context, future, html;
    if (!(this.layout != null)) {
      html = '<!DOCTYPE html>';
    } else {
      future = new Future;
      this.layout(req, res, next, function(err, html) {
        return future["return"](html);
      });
      html = future.wait();
    }
    context = Contextify(domino.createWindow(html));
    context.SERVER = {
      res: res,
      req: req,
      next: next
    };
    context.navigator = {
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_7) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.57 Safari/534.24',
      appName: 'node',
      platform: 'node'
    };
    context.history = {
      pushState: function() {},
      replaceState: function() {}
    };
    context.console = console;
    context.addEventListener = function(event, cb) {
      if (event === 'DOMContentLoaded') {
        return cb();
      } else {

      }
    };
    context.setTimeout = function(func, delay) {
      var timer;
      future = new Future;
      if (delay === 0) {
        timer = process.nextTick;
      } else {
        timer = setTimeout;
      }
      timer(function() {
        return future["return"]();
      }, delay);
      future.wait();
      return func();
    };
    context.window = context;
    context.WebSocket = this.wsclient;
    if (req != null) {
      context.location = url.parse('http://' + req.headers.host + req.url + '#');
      context.location.search = '';
      context.document.location = context.location;
    }
    context.run(requirejs_source);
    context.require.load = this.loadScript;
    this.Contexts.set(Fiber.current, context);
    return context;
  };

  Portmanteau.prototype.RPC = {};

  Portmanteau.prototype.setupPackages = function(json) {
    var name, version, _ref2, _results,
      _this = this;
    _ref2 = json.dependencies;
    _results = [];
    for (name in _ref2) {
      version = _ref2[name];
      _results.push((function() {
        var child, key, length, location, obj, subdir, val, _ref3;
        location = name.replace('/', '-');
        name = name.split('/')[1];
        child = require(path.join(_this.dir, 'components', location, 'component.json'));
        subdir = path.dirname(child.scripts[0]);
        obj = {
          name: name,
          location: path.join('components', location, subdir),
          main: path.basename(child.scripts[0]),
          dependencies: []
        };
        length = _this.packages.push(obj);
        _ref3 = child.dependencies;
        for (key in _ref3) {
          val = _ref3[key];
          obj.dependencies.push(key.split('/')[1]);
        }
        _this.components[name] = length - 1;
        return _this.setupPackages(child);
      })());
    }
    return _results;
  };

  Portmanteau.prototype.load = function(dir) {
    var _this = this;
    this.dir = dir;
    this.scripts = express["static"](this.dir);
    this.setupPackages(require(path.join(this.dir, 'component.json')));
    this.server.get('/require.js', function(req, res, next) {
      return res.send(requirejs_source + ("require.config({packages:" + (JSON.stringify(_this.packages)) + ", baseUrl:'/requirejs'})"));
    });
    this.server.get('/requirejs/*', function(req, res, next) {
      var extension, name, script;
      script = req.params[0];
      extension = path.extname(script);
      name = script.replace(extension, '');
      return fs.readFile(path.join(_this.dir, script), 'utf8', function(err, data) {
        var deps, pack, _i, _len, _ref2;
        _ref2 = _this.packages;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          pack = _ref2[_i];
          if (pack.location === path.dirname(script)) {
            deps = ['require', 'exports', 'module'].concat(pack.dependencies);
            res.send("define(" + (JSON.stringify(deps)) + ", function(require, exports, module){var define = undefined; " + data + " ; return exports})");
            return;
          }
        }
        return res.send(data);
      });
    });
    this.server.get('/components/*', function(req, res, next) {
      var script;
      script = req.params[0];
      return fs.readFile(path.join(_this.dir, 'components', script), 'utf8', function(err, data) {
        var deps;
        deps = ['require', 'exports', 'module'];
        res.send("define(" + (JSON.stringify(deps)) + ", function(require, exports, module){var define = undefined; " + data + " ; return exports})");
      });
    });
    return this.server.use(function(req, res, next) {
      return Fiber(function() {
        var context, current, mods;
        context = _this.createContext(req, res, next);
        mods = context.require.s.newContext();
        mods.configure({
          packages: _this.packages
        });
        mods.require(['main'], function() {});
        current = Fiber.current;
        if (!res.ended) {
          return res.end(context.document.innerHTML, function() {
            _this.Contexts["delete"](current);
            current.reset();
            return current = {};
          });
        } else {
          _this.Contexts["delete"](current);
          current.reset();
          return current = {};
        }
      }).run();
    });
  };

  Portmanteau.prototype.listen = function() {
    var handle, socket,
      _this = this;
    handle = this.server.listen.apply(this.server, arguments);
    socket = sockjs.createServer();
    (function() {
      var RPC, wsclient;
      RPC = _this.RPC;
      wsclient = (function() {

        function wsclient(location) {
          var self;
          self = this;
          this.data = '';
          this.port = {
            send: function(message) {
              self.data = message;
              return self.future["return"]();
            }
          };
          Remote(this.port, RPC, []);
        }

        wsclient.prototype.send = function(data) {
          this.future = new Future;
          this.port.recieve(data);
          this.future.wait();
          return this.onmessage({
            data: this.data
          });
        };

        return wsclient;

      })();
      wsclient.prototype.__defineSetter__('onopen', function(f) {
        return f();
      });
      return _this.wsclient = wsclient;
    })();
    socket.on('connection', function(ws) {
      var port;
      port = {
        send: function(message) {
          return ws.write(message);
        }
      };
      ws.on('data', function(data) {
        return port.recieve(data);
      });
      ws.on('close', function() {
        return port.close();
      });
      Remote(port, _this.RPC, []);
      return port.open();
    });
    return socket.installHandlers(handle, {
      prefix: '/socket'
    });
  };

  return Portmanteau;

})();

module.exports = Portmanteau;
